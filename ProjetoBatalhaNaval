/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetobatalhanaval;

import java.util.Random;
import java.util.Scanner;

/**
 *
 * @author FAMILIA
 */
public class ProjetoBatalhaNaval {

    /**
     * @param args the command line arguments
     */
    static int altura, largura;
    static int jogador1[][], jogador2[][];
    static String nomeJogador1, nomeJogador2;
    static int quantidadeDeNavios, limiteMaximoDeNavios;
    static int naviosJogador1, naviosJogador2;
    static final int VAZIO = 0;
    static final int NAVIO = 1;
    static final int ERROU_TIRO = 2;
    static final int ACERTOU_TIRO = 3;
    static final int POSICAO_X = 0;
    static final int POSICAO_Y = 1;
    static Scanner input = new Scanner(System.in);
    

    public static void tabuleiro() {
        Scanner input;

        input = new Scanner(System.in);
        System.out.println("Digite a altura do tabuleiro: ");
        altura = input.nextInt();
        System.out.println("Digite a largura do tabuleiro: ");
        largura = input.nextInt();
        input.close();

    }

    public static void contruirTabuleiro() {
        jogador1 = new int[altura][largura];
        jogador2 = new int[altura][largura];

    }

    public static void obterNomes() {
        System.out.println("Digite o nome do Jogador 1: ");
        nomeJogador1 = input.next();
        System.out.println("Digite o nome do Jogador 2: ");
        nomeJogador2 = input.next();
    }

    public static void calcularNavios() {
        limiteMaximoDeNavios = (altura * largura) / 3;
    }

    public static void iniciandoOsTamanhosDosTabuleiros() {
        jogador1 = retornarNovoTabuleiroVazio();
        jogador2 = retornarNovoTabuleiroVazio();
    }

    public static int[][] retornarNovoTabuleiroVazio() {
        return new int[altura][largura];
    }

    public static void quantidadeNavios() {
        System.out.println("Digite a qtde de navios:");
        System.out.println("Limite maximo: " + limiteMaximoDeNavios + " navios");
        quantidadeDeNavios = input.nextInt();
        if (quantidadeDeNavios < 1 && quantidadeDeNavios > limiteMaximoDeNavios) {
            quantidadeDeNavios = limiteMaximoDeNavios;
        }
    }

    public static void instanciarContadores() {
        naviosJogador1 = quantidadeDeNavios;
        naviosJogador2 = quantidadeDeNavios;
    }

    public static int[][] retornarNovoTabuleiroComOsNavios() {
        int novoTabuleiro[][] = retornarNovoTabuleiroVazio();
        int quantidadeRestanteDeNavios = quantidadeDeNavios;
        int x, y;
        Random numeroAleatorio = new Random();
        do {
            x = 0;
            y = 0;
            for (int[] linha : novoTabuleiro) {
                for (int coluna : linha) {
                    if (numeroAleatorio.nextInt(100) <= 10) {
                        if (coluna == VAZIO) {
                            novoTabuleiro[x][y] = NAVIO;
                            quantidadeRestanteDeNavios--;
                            break;
                        }
                        if (quantidadeRestanteDeNavios < 0) {
                            break;
                        }
                    }
                    y++;
                }
                y = 0;
                x++;
                if (quantidadeRestanteDeNavios <= 0) {
                    break;
                }
            }
        } while (quantidadeRestanteDeNavios > 0);
        return novoTabuleiro;
    }

    public static void inserirNavios(){
        jogador1 = retornarNovoTabuleiroComOsNavios();
        jogador2 = retornarNovoTabuleiroComOsNavios();
    }

    public static void exibirNumerosDasColunasDosTabuleiros() {
        int numeroDaColuna = 1;
        String numerosDoTabuleiro = "   ";

        for (int i = 0; i < largura; i++) {
            numerosDoTabuleiro += (numeroDaColuna++) + " ";
        }
        System.out.println(numerosDoTabuleiro);
    }

    public static void exibirTabuleiro(String nomeDoJogador, int[][] tabuleiro, boolean seuTabuleiro) {
        System.out.println("|----- " + nomeDoJogador + " -----|");
        exibirNumerosDasColunasDosTabuleiros();
        String linhaDoTabuleiro = "";
        char letraDaLinha = 65;
        for (int[] linha : tabuleiro) {
            linhaDoTabuleiro = (letraDaLinha++) + " |";

            for (int coluna : linha) {
                switch (coluna) {
                    case VAZIO:
                        linhaDoTabuleiro += " |";
                        break;
                    case NAVIO:
                        if (seuTabuleiro) {
                            linhaDoTabuleiro += "N|";
                            break;
                        } else {
                            linhaDoTabuleiro += " |";
                            break;
                        }
                    case ERROU_TIRO:
                        linhaDoTabuleiro += "X|";
                        break;

                    case ACERTOU_TIRO:
                        linhaDoTabuleiro += "D|";
                        break;
                }
            }
            System.out.println(linhaDoTabuleiro);
        }
    }

    public static void exibirTabuleirosDosJogadores() {
        exibirTabuleiro(nomeJogador1, jogador1, true);
        exibirTabuleiro(nomeJogador2, jogador2, false);
    }

    public static boolean validarPosicoesInseridasPeloJogador(int[] posicoes) {
        boolean retorno = true;
        if (posicoes[0] > altura - 1) {
            retorno = false;
            System.out.println("A posicao das letras não pode ser maior que " + (char) (altura + 64));
        }

        if (posicoes[1] > largura) {
            retorno = false;
            System.out.println("A posicao numérica não pode ser maior que " + largura);
        }

        return retorno;
    }

    public static String receberValorDigitadoPeloJogador() {
        System.out.println("Digite a posição do seu tiro:");
        return input.next();
    }

    public static boolean validarTiroDoJogador(String tiroDoJogador) {
        int quantidadeDeNumeros = (largura > 10) ? 2 : 1;
        String expressaoDeVerificacao = "^[A-Za-z]{1}[0-9]{"
                + quantidadeDeNumeros + "}$";
        return tiroDoJogador.matches(expressaoDeVerificacao);
    }

    public static int[] retornarPosicoesDigitadasPeloJogador(String tiroDoJogador) {
        String tiro = tiroDoJogador.toLowerCase();
        int[] retorno = new int[2];
        retorno[POSICAO_X] = tiro.charAt(0) - 97;
        retorno[POSICAO_Y] = Integer.parseInt(tiro.substring(1)) - 1;
        return retorno;
    }

    public static void inserirValoresDaAcaoNoTabuleiro(int[] posicoes, int numeroDoJogador) {
        if (numeroDoJogador == 1) {
            if (jogador2[posicoes[POSICAO_X]][posicoes[POSICAO_Y]] == NAVIO) {
                jogador2[posicoes[POSICAO_X]][posicoes[POSICAO_Y]] = ACERTOU_TIRO;
                naviosJogador2--;
                System.out.println("Você acertou um navio!");
            } else {
                jogador2[posicoes[POSICAO_X]][posicoes[POSICAO_Y]] = ERROU_TIRO;
                System.out.println("Você errou o tiro!");
            }
        } else {
            if (jogador1[posicoes[POSICAO_X]][posicoes[POSICAO_Y]] == NAVIO) {
                jogador1[posicoes[POSICAO_X]][posicoes[POSICAO_Y]] = ACERTOU_TIRO;
                naviosJogador1--;
                System.out.println("Você acertou um navio!");
            } else {
                jogador1[posicoes[POSICAO_X]][posicoes[POSICAO_Y]] = ERROU_TIRO;
                System.out.println("Você errou o tiro!");
            }
        }
    }

    public static boolean acaoDoJogador() {
        boolean acaoValida = true;
        String tiroDoJogador = receberValorDigitadoPeloJogador();
        if (validarTiroDoJogador(tiroDoJogador)) {
            int[] posicoes = retornarPosicoesDigitadasPeloJogador(tiroDoJogador);
            if (validarPosicoesInseridasPeloJogador(posicoes)) {
                inserirValoresDaAcaoNoTabuleiro(posicoes, 1);
            } else {
                acaoValida = false;
            }
        } else {
            System.out.println("Posição inválida");
            acaoValida = false;
        }
        return acaoValida;
    }

    public static void acaoDoComputador() {
        int[] posicoes = retornarJogadaDoComputador();
        inserirValoresDaAcaoNoTabuleiro(posicoes, 2);
    }

    public static int[] retornarJogadaDoComputador() {
        int[] posicoes = new int[2];
        posicoes[POSICAO_X] = retornarJogadaAleatoriaDoComputador(altura);
        posicoes[POSICAO_Y] = retornarJogadaAleatoriaDoComputador(largura);
        return posicoes;
    }

    public static int retornarJogadaAleatoriaDoComputador(int limite) {
        Random jogadaDoComputador = new Random();
        int numeroGerado = jogadaDoComputador.nextInt(limite);
        return (numeroGerado == limite) ? --numeroGerado : numeroGerado;
    }

    public static void main(String[] args) {
        tabuleiro();
        contruirTabuleiro();
        calcularNavios();
        quantidadeNavios();
        instanciarContadores();
        inserirNavios();
        boolean jogoAtivo = true;
        do {
            exibirTabuleirosDosJogadores();
            if (acaoDoJogador()) {
                if (naviosJogador2 <= 0) {
                    System.out.println("Jogador " + nomeJogador1 + " venceu!");
                    break;
                }
               
                acaoDoComputador();
                if (naviosJogador1 <= 0) {
                    System.out.println("Jogador " + nomeJogador2 + " venceu!");
                    break;
                }
            }

        } while (jogoAtivo);
        exibirTabuleirosDosJogadores();
        input.close();

    }

}
